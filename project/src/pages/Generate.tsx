import React, { useState } from 'react';
import { 
  Zap, 
  Upload, 
  Download, 
  Settings, 
  Atom,
  Loader2,
  CheckCircle,
  AlertCircle
} from 'lucide-react';

interface GenerationParams {
  bandGap: string;
  symmetry: string;
  magneticProperty: string;
  bulkModulus: string;
  density: string;
  spaceGroup: string;
  composition: string;
}

const Generate: React.FC = () => {
  const [params, setParams] = useState<GenerationParams>({
    bandGap: '',
    symmetry: '',
    magneticProperty: '',
    bulkModulus: '',
    density: '',
    spaceGroup: '',
    composition: ''
  });
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [results, setResults] = useState<any[]>([]);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);

  const handleInputChange = (field: keyof GenerationParams, value: string) => {
    setParams(prev => ({ ...prev, [field]: value }));
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && file.name.endsWith('.cif')) {
      setUploadedFile(file);
    }
  };

  const handleGenerate = async () => {
    setIsGenerating(true);
    
    // Simulate AI generation process
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const mockResults = [
      {
        id: 1,
        formula: 'TiO₂',
        bandGap: '3.2 eV',
        symmetry: 'Tetragonal',
        magnetism: 'Diamagnetic',
        stability: 0.95,
        spaceGroup: 'P42/mnm'
      },
      {
        id: 2,
        formula: 'CaTiO₃',
        bandGap: '3.6 eV',
        symmetry: 'Cubic',
        magnetism: 'Paramagnetic',
        stability: 0.87,
        spaceGroup: 'Pm-3m'
      },
      {
        id: 3,
        formula: 'SrTiO₃',
        bandGap: '3.4 eV',
        symmetry: 'Cubic',
        magnetism: 'Diamagnetic',
        stability: 0.92,
        spaceGroup: 'Pm-3m'
      }
    ];
    
    setResults(mockResults);
    setIsGenerating(false);
  };

  const downloadCIF = (result: any) => {
    const cifContent = `# Generated by CrystalGen
data_${result.formula}
_chemical_formula_sum '${result.formula}'
_cell_length_a 3.905
_cell_length_b 3.905
_cell_length_c 3.905
_cell_angle_alpha 90.0
_cell_angle_beta 90.0
_cell_angle_gamma 90.0
_space_group_name_H-M_alt '${result.spaceGroup}'
`;
    
    const blob = new Blob([cifContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${result.formula}.cif`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-3xl md:text-4xl font-bold text-slate-900">
          Generate Crystal Structures
        </h1>
        <p className="text-lg text-slate-600 max-w-2xl mx-auto">
          Define your target properties and let our AI generate optimized crystal structures.
        </p>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* Input Panel */}
        <div className="space-y-6">
          {/* File Upload */}
          <div className="bg-white rounded-2xl p-6 shadow-sm border border-slate-100">
            <h3 className="text-lg font-semibold text-slate-900 mb-4 flex items-center space-x-2">
              <Upload className="w-5 h-5 text-blue-600" />
              <span>Import Structure (Optional)</span>
            </h3>
            <div className="border-2 border-dashed border-slate-200 rounded-xl p-6 text-center hover:border-blue-300 transition-colors">
              <input
                type="file"
                accept=".cif"
                onChange={handleFileUpload}
                className="hidden"
                id="cif-upload"
              />
              <label htmlFor="cif-upload" className="cursor-pointer">
                <div className="space-y-2">
                  <div className="w-12 h-12 bg-blue-50 rounded-lg mx-auto flex items-center justify-center">
                    <Upload className="w-6 h-6 text-blue-600" />
                  </div>
                  <p className="text-sm font-medium text-slate-700">
                    {uploadedFile ? uploadedFile.name : 'Upload CIF file'}
                  </p>
                  <p className="text-xs text-slate-500">
                    Use as reference structure or starting point
                  </p>
                </div>
              </label>
            </div>
          </div>

          {/* Generation Parameters */}
          <div className="bg-white rounded-2xl p-6 shadow-sm border border-slate-100">
            <h3 className="text-lg font-semibold text-slate-900 mb-6 flex items-center space-x-2">
              <Settings className="w-5 h-5 text-blue-600" />
              <span>Target Properties</span>
            </h3>
            
            <div className="grid md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Band Gap (eV)
                </label>
                <input
                  type="number"
                  value={params.bandGap}
                  onChange={(e) => handleInputChange('bandGap', e.target.value)}
                  placeholder="e.g., 2.5"
                  step="0.1"
                  className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Crystal System
                </label>
                <select
                  value={params.symmetry}
                  onChange={(e) => handleInputChange('symmetry', e.target.value)}
                  className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                >
                  <option value="">Any</option>
                  <option value="cubic">Cubic</option>
                  <option value="tetragonal">Tetragonal</option>
                  <option value="orthorhombic">Orthorhombic</option>
                  <option value="hexagonal">Hexagonal</option>
                  <option value="trigonal">Trigonal</option>
                  <option value="monoclinic">Monoclinic</option>
                  <option value="triclinic">Triclinic</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Magnetic Property
                </label>
                <select
                  value={params.magneticProperty}
                  onChange={(e) => handleInputChange('magneticProperty', e.target.value)}
                  className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                >
                  <option value="">Any</option>
                  <option value="diamagnetic">Diamagnetic</option>
                  <option value="paramagnetic">Paramagnetic</option>
                  <option value="ferromagnetic">Ferromagnetic</option>
                  <option value="antiferromagnetic">Antiferromagnetic</option>
                  <option value="ferrimagnetic">Ferrimagnetic</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Bulk Modulus (GPa)
                </label>
                <input
                  type="number"
                  value={params.bulkModulus}
                  onChange={(e) => handleInputChange('bulkModulus', e.target.value)}
                  placeholder="e.g., 150"
                  className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Density (g/cm³)
                </label>
                <input
                  type="number"
                  value={params.density}
                  onChange={(e) => handleInputChange('density', e.target.value)}
                  placeholder="e.g., 4.2"
                  step="0.1"
                  className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Space Group
                </label>
                <input
                  type="text"
                  value={params.spaceGroup}
                  onChange={(e) => handleInputChange('spaceGroup', e.target.value)}
                  placeholder="e.g., Pm-3m"
                  className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                />
              </div>
            </div>

            <div className="mt-4">
              <label className="block text-sm font-medium text-slate-700 mb-2">
                Chemical Composition
              </label>
              <input
                type="text"
                value={params.composition}
                onChange={(e) => handleInputChange('composition', e.target.value)}
                placeholder="e.g., ABO₃, A₂BO₄, or specific elements"
                className="w-full px-3 py-2 border border-slate-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              />
            </div>

            <button
              onClick={handleGenerate}
              disabled={isGenerating}
              className="w-full mt-6 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-xl font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:shadow-lg transform hover:-translate-y-0.5 transition-all duration-200 flex items-center justify-center space-x-2"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Generating Structures...</span>
                </>
              ) : (
                <>
                  <Zap className="w-5 h-5" />
                  <span>Generate Crystals</span>
                </>
              )}
            </button>
          </div>
        </div>

        {/* Results Panel */}
        <div className="space-y-6">
          {/* Generation Status */}
          {isGenerating && (
            <div className="bg-blue-50 rounded-2xl p-6 border border-blue-100">
              <div className="flex items-center space-x-3">
                <Loader2 className="w-6 h-6 text-blue-600 animate-spin" />
                <div>
                  <h3 className="font-semibold text-blue-900">Generating Crystal Structures</h3>
                  <p className="text-sm text-blue-700">AI is analyzing constraints and generating candidates...</p>
                </div>
              </div>
            </div>
          )}

          {/* Results */}
          {results.length > 0 && (
            <div className="bg-white rounded-2xl p-6 shadow-sm border border-slate-100">
              <h3 className="text-lg font-semibold text-slate-900 mb-6 flex items-center space-x-2">
                <CheckCircle className="w-5 h-5 text-emerald-600" />
                <span>Generated Structures ({results.length})</span>
              </h3>

              <div className="space-y-4">
                {results.map((result) => (
                  <div
                    key={result.id}
                    className="border border-slate-200 rounded-xl p-4 hover:border-slate-300 transition-colors"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-gradient-to-br from-emerald-500 to-blue-600 rounded-lg flex items-center justify-center">
                          <Atom className="w-5 h-5 text-white" />
                        </div>
                        <div>
                          <h4 className="font-semibold text-slate-900">{result.formula}</h4>
                          <p className="text-sm text-slate-500">{result.symmetry} • {result.spaceGroup}</p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                          result.stability > 0.9 
                            ? 'bg-emerald-100 text-emerald-700' 
                            : result.stability > 0.8
                            ? 'bg-yellow-100 text-yellow-700'
                            : 'bg-red-100 text-red-700'
                        }`}>
                          {Math.round(result.stability * 100)}% stable
                        </div>
                        <button
                          onClick={() => downloadCIF(result)}
                          className="p-2 text-slate-400 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                        >
                          <Download className="w-4 h-4" />
                        </button>
                      </div>
                    </div>

                    <div className="grid grid-cols-3 gap-4 text-sm">
                      <div>
                        <span className="text-slate-500">Band Gap:</span>
                        <p className="font-medium text-slate-900">{result.bandGap}</p>
                      </div>
                      <div>
                        <span className="text-slate-500">Magnetism:</span>
                        <p className="font-medium text-slate-900">{result.magnetism}</p>
                      </div>
                      <div>
                        <span className="text-slate-500">Space Group:</span>
                        <p className="font-medium text-slate-900">{result.spaceGroup}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Empty State */}
          {!isGenerating && results.length === 0 && (
            <div className="bg-slate-50 rounded-2xl p-12 text-center border-2 border-dashed border-slate-200">
              <div className="w-16 h-16 bg-slate-100 rounded-2xl mx-auto mb-4 flex items-center justify-center">
                <Atom className="w-8 h-8 text-slate-400" />
              </div>
              <h3 className="text-lg font-semibold text-slate-600 mb-2">
                Ready to Generate
              </h3>
              <p className="text-slate-500">
                Set your target properties and click generate to discover new crystal structures.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Generate;